tTest <- pwr.t.test(n = idx, d = 0.2, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
,500)  # Upper N limit arbitrarily chosen.
tTestPwr <- seq(1,499)
for (idx in sampleN){
idx
tTest <- pwr.t.test(n = idx, d = 0.2, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
# Theoretical sample size vector
sampleN <- seq(2,500)  # Upper N limit arbitrarily chosen.
tTestPwr <- seq(1,499)
for (idx in sampleN){
idx
tTest <- pwr.t.test(n = idx, d = 0.2, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
tTestPwr
500)  # Upper N limit arbitrarily chosen.
tTestPwr <- seq(1,499)
for (idx in sampleN){
idx
tTest <- pwr.t.test(n = idx, d = 0.1, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
sampleN <- seq(2,500)  # Upper N limit arbitrarily chosen.
tTestPwr <- seq(1,499)
for (idx in sampleN){
idx
tTest <- pwr.t.test(n = idx, d = 0.1, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
tTestPwr
sampleN <- seq(2,500)  # Upper N limit arbitrarily chosen.
tTestPwr <- seq(1,499)
for (idx in sampleN){
idx
tTest <- pwr.t.test(n = idx, d = 0.2, sig.level = 0.05, power = NULL,
type = "one.sample", alternative = "two.sided")
tTestPwr[idx] <- tTest[4]
}
tTestPwr
# Plot sample size curves for detecting correlations of
# various sizes.
library(pwr)
# range of correlations
r <- seq(.1,.5,.01)
nr <- length(r)
# power values
p <- seq(.4,.9,.1)
np <- length(p)
# obtain sample sizes
samsize <- array(numeric(nr*np), dim=c(nr,np))
for (i in 1:np){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = .05, power = p[i],
alternative = "two.sided")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(r)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Correlation Coefficient (r)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(r, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation for Correlation Studies\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
# obtain sample sizes
# Plot sample size curves for detecting correlations of
# various sizes.
library(pwr)
# range of sample sizes
n <- seq(2,500)
# power values
p <- seq(.95,.99,.01)
np <- length(p)
# obtain sample sizes
samsize <- array(numeric(nr*np), dim=c(nr,np))
for (i in 1:np){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = .05, power = p[i],
alternative = "two.sided")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(r)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Correlation Coefficient (r)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(r, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation for Correlation Studies\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
# Plot sample size curves for detecting correlations of
# various sizes.
library(pwr)
# range of sample sizes
n <- seq(2,500)
# power values
p <- seq(.95,.99,.01)
np <- length(p)
# obtain sample sizes
samsize <- array(numeric(nr*np), dim=c(nr,np))
for (i in 1:np){
for (j in 1:nr){
result <- pwr.r.test(n = NULL, r = r[j],
sig.level = .05, power = p[i],
alternative = "two.sided")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(n)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Correlation Coefficient (r)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(r, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation for Correlation Studies\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
sigma
pwr.t.test(n = NULL, d=.2,
sig.level = .05, power = .95,
alternative = "two.sided")
ename <- 'U:\Winston.Hensley\Documents\R Code\data\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(file, header = FALSE, sep = ","
,col.names = c('Timestamp','Value'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
filename <- "U:\Winston.Hensley\Documents\R Code\data\sampleSSP.txt"
sensor <- 'M'
myData <- read.table(file, header = FALSE, sep = ","
,col.names = c('Timestamp','Value'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
#}
filename <- 'U:\Winston.Hensley\Documents\R Code\data\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Timestamp','Value'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
rm <- ls()
rm <- ls(all)
rm(list=ls()
)
rm(list=ls())
filename <- 'U:\Winston.Hensley\Documents\R Code\data\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Timestamp','Value'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
#function(filename, sensor) read1HzData {
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Timestamp','Value'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
#################################
#function(filename, sensor) read1HzData {
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'), as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'),
skip = 1, strip.white = FALSE, blank.lines.skip = TRUE)
#}
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'),
skip = 2, strip.white = FALSE, blank.lines.skip = TRUE)
#}
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'),
skip = 2, strip.white = FALSE, blank.lines.skip = TRUE)
#}
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
sensor <- 'M'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'),
skip = 2, strip.white = FALSE, blank.lines.skip = TRUE)
plot.ts(myData[, 4])
#}
#Look for those outliers
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut++
}
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut++
}
}
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut++
}
}
#Look for those outliers
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut++
}
}
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut++
}
idxOut <- idxOut++
)
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut++
}
}
idxOut <- 1
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut+1
}
}
myOutliers <- date.frame()
myOutliers <- vector()
#Look for those outliers
idxOut <- 1
myOutliers <- vector()
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut+1
}
}
myOutliers <- date.frame()
myOutliers <- matrix()
idxOut <- 1
myOutliers <- matrix()
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut+1
}
}
idxOut
or those outliers
idxOut <- 1
myOutliers <- matrix()
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
idxOut
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut+1
}
}
#Look for those outliers
idxOut <- 1
myOutliers <- matrix()
for (idx in seq(length(myData[,4]))) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
idxOut
myOutliers[idxOut,1] <- myData[idx,1]
myOutliers[idxOut,2] <- myData[idx,2]
myOutliers[idxOut,4] <- myData[idx,4]
idxOut <- idxOut+1
}
}
idx in seq(length(myData[,4]))
seq(length(myData[,4]))
idx ineq(length(myData[,4])) seq(length(myData[,4]))
idx ineq(length(myData[,4])) seq(length(myData[,4]))eq(length(myData[,4]))
eq(length(myData[,4]))
seq(length(myData[,4]))
#Look for those outliers
idxOut <- 1
myOutliers <- matrix()
for (idxFor in seq(length(myData[,4]))) {
if (myData[idxFor,4] > 6 | myData[idxFor,4] < 3){
idxOut
myOutliers[idxOut,1] <- myData[idxFor,1]
myOutliers[idxOut,2] <- myData[idxFor,2]
myOutliers[idxOut,4] <- myData[idxFor,4]
idxOut <- idxOut+1
}
}
idxOut <- 1
myOutliers <- matrix()
for (idxFor in seq(length(myData[,4]))) {
if (myData[idxFor,4] > 6 | myData[idxFor,4] < 3){
idxOut
myOutliers[idxOut,1] <- myData[idxFor,1]
myOutliers[idxOut,2] <- myData[idxFor,2]
myOutliers[idxOut,3] <- myData[idxFor,3]
myOutliers[idxOut,4] <- myData[idxFor,4]
idxOut <- idxOut+1
}
}
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
#Look for those outliers
idxOut <- 1
myOutliers <- matrix()
for (idx in 1:length(myData[,4])) {
if (myData[idx,4] > 6 | myData[idx,4] < 3){
idxOut
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
idxOut <- idxOut+1
}
}
idx
if (myData[idx,4] > 6 | myData[idx,4] < 3){
idxOut
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
idxOut <- idxOut+1
}
idxOut <- 1
myOutliers <- matrix()
for (idx in 2:length(myData[,4])) {
idx
if (myData[idx,4] > 6 | myData[idx,4] < 3){
idxOut
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
idxOut <- idxOut+1
}
}
myData[1,4]
1length(myData[,4]
length(myData[,4]
)
1:length(myData[,4])
for (idx in 1:length(myData[,4])) {
}
idxOut <- 1
myOutliers <- matrix()
for (idx in 1:length(myData[,4])) {
if (myData[idx,4] > 6 || myData[idx,4] < 3){
idxOut
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
idxOut <- idxOut+1
}
}
if (myData[idx,4] > 6 || myData[idx,4] < 3){
idxOut
myOutliers[idxOut,c(1,2,3)] <- myData[idx,c(1,2,3)]
idxOut <- idxOut+1
}
for (idx in 1:length(myData[,4])) {
if (myData[idx,4] > 6 || myData[idx,4] < 3){
idxOut <- idxOut+1
}
}
myOutliers <- vector()
idxOut <- 1
myOutliers <- vector()
for (idx in 1:length(myData[,4])) {
if (myData[idx,4] > 6 || myData[idx,4] < 3){
myOutliers[idxOut] <- idx
idxOut <- idxOut+1
}
}
myData[myOutliers,4]
myData[myOutliers,5]
myData[myOutliers,2]
#####################################################
#
# Date: 12/31/2014
#
# Function: Read 1Hz Data from Sutron DCP and
#           output into an R structure
#
# Arguments: filename - full filename for log file
#
# Output: Returns an R dataframe with sequential
#         data and NA where data was not saved
#         in the timestamped 1Hz interval. Three
#         columns; timestamp,sensor,reading are returned
#
#####################################################
#function(filename) read1HzData {
rm(list=ls())
filename <- 'U:\\Winston.Hensley\\Documents\\R Code\\data\\sampleSSP.txt'
myData <- read.table(filename, header = FALSE, sep = ","
,col.names = c('Date','Time','Sensor','Value','','Quality'),
skip = 2, strip.white = FALSE, blank.lines.skip = TRUE)
plot.ts(myData[, 4])
#Look for those outliers
idxOut <- 1
myOutliers <- vector()
for (idx in 1:length(myData[,4])) {
if (myData[idx,4] > 6 || myData[idx,4] < 3){
myOutliers[idxOut] <- idx
idxOut <- idxOut+1
}
}
#}
load(read1HzData)
pwd
cwd
wd
pwd()
cwd()
getwd()
getwd()
setwd('U:/Winston.Hensley/Documents/R Code')
load('read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
read1HzData('C://Users//Winston.Hensley//Desktop//SSP.txt')
read1HzData('C://Users//Winston.Hensley//Desktop//windSSP.txt')
read1HzData('C://Users//Winston.Hensley//Desktop//windSSP.csv')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
plot <-  source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
source('U:/Winston.Hensley/Documents/R Code/read1HzData.R')
read1HzData('C:/Users/Winston.Hensley/Desktop/SSP.txt')
clear(ls())
rm<-ls
clear all
rm(list=ls())
rm(list<-ls())
ls()
rm(ls())
